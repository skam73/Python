from sys import argv
from functools import reduce
from itertools import count, cycle, islice
import math

# Задание 1
# Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника. 
# Используйте в нём формулу: (выработка в часах*ставка в час) + премия. Во время выполнения расчёта 
# для конкретных значений необходимо запускать скрипт с параметрами.
print('Задание 1. "Расчёт заработной платы сотрудника"')

def wage(output_per_hour, rate_per_hour, bonus):
    return (int(output_per_hour) * int(rate_per_hour)) + int(bonus)

argv = '100 10 100'.split()

output_per_hour, rate_per_hour, bonus = argv
print(f'Выработка в часах: {output_per_hour}')

print(f'Ставка в час: {rate_per_hour}')
print(f'Премия: {bonus}')
print(f'Заработная плата: {wage(output_per_hour, rate_per_hour, bonus)}')

# Задание 2
# Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].
print()
print('nЗадание 2. "Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента"')

list_2 = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]

print([list_2[num_el] for num_el in range(1, len(list_2)) if list_2[num_el] > list_2[(num_el - 1)]])

# Задание 3
# Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
# Подсказка: используйте функцию range() и генератор.
print()
print('Задание 3. "Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21"')

print([el for el in range(20, 240) if el % 21 == 0 or el % 20 == 0])

# Задание 4
# Представлен список чисел. Определите элементы списка, не имеющие повторений. 
# Сформируйте итоговый массив чисел, соответствующих требованию. Элементы выведите в порядке 
# их следования в исходном списке. Для выполнения задания обязательно используйте генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]
print()
print('Задание 4. "Определите элементы списка, не имеющие повторений"')

list_4 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
print([el for el in list_4 if list_4.count(el) == 1])

# Задание 5
# Реализовать формирование списка, используя функцию range() и возможности генератора. 
# В список должны войти чётные числа от 100 до 1000 (включая границы). 
# Нужно получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().
print()
print('Задание 5. "Результат вычисления произведения всех элементов списка"')

print(reduce(lambda x,y: x * y,[el for el in range(100, 1000+1) if el % 2 == 0 ]))



# Задание 6
# Реализовать два небольших скрипта:
# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого заранее. 
# Подсказка: используйте функцию count() и cycle() модуля itertools. 
# Обратите внимание, что создаваемый цикл не должен быть бесконечным. 
# Предусмотрите условие его завершения. 
# Например, в первом задании выводим целые числа, начиная с 3. 
# При достижении числа 10 — завершаем цикл. Вторым пунктом необходимо предусмотреть условие, 
# при котором повторение элементов списка прекратится.
print()
print('Задание 6. "Реализовать два небольших скрипта"')

argv = '3 10'.split()

start_number_count,start_number_cycle = argv

# count - этот итератор, возвращающий равномерно распределённые переменные с числа, 
# переданного как стартовый параметр. Допускается указывать значения шага.
for el in count(int(start_number_count)):
    if el > 10: 
        break
    else:
        print(el)


print('\nОграничение itertools.count() без break, использование islice:')
for el in islice(count(int(start_number_count)), 10):
    print(el)

print('\nОграничение itertools.cycle() c помощью islice:')
for el in islice(cycle([1, 2, 3, 4]), int(start_number_cycle)):
    print(el)


# Задание 7
# Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
# При вызове функции должен создаваться объект-генератор. Функция вызывается следующим образом: 
# for el in fact(n). Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, 
# начиная с 1! и до n!.
#Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
print()
print('Задание 7. "Генератор с помощью функции с ключевым словом yield"')

def fact(n):
    factorial_n = 1
    for i in range(1, n + 1):
        factorial_n *= i
        yield factorial_n

n = int(input('Enter a number for calculating to n-factorial: '))      
for i, v in enumerate(fact(n)):
    print(f'Factorial {i+1}! =  {v}')


def fact_math(n):
    for i in range(1, n + 1):
        yield math.factorial(i)
print()
print('\n'.join([ f'Factorial {i+1}! =  {v}' for i, v in enumerate(fact_math(n))]))
